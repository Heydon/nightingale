/* ==========================================================================
   #SPACING
   ========================================================================== */

/**
 * A series of spacing utilities that we can use to nudge things around in the
 * HTML. Classes are responsive and follow this sort of patter:
 *
 *   .u-margin-top {}
 *   .u-padding-left-small@lg
 *   .u-margin-bottom@xl
 */

// The following Sass is super scary; I’m sorry. Basically what it does is loops
// over all of our different possible permutations of margins and paddings and
// directions and sizes and breakpoints and gives us the corresponding classes.





// Load up some maps for us to loop through later.
$_spacing-directions: (
  null,
  -top,
  -right,
  -bottom,
  -left,
);

$_spacing-sizes: (
  null: $global-spacing-unit,
  -tiny: $global-spacing-unit-tiny,
  -small: $global-spacing-unit-small,
  -large: $global-spacing-unit-large,
) !default;





// Use a mixin to build spacing classes, rather than generating them directly.
// This also allows us to call the mixin from within other loops.
@mixin _build-spacing() {

  // If we’re not creating responsive classes, these variables won’t exist and
  // will therefore throw an error. All we’re doing here is assigning them some
  // null values that will either a) not throw an error or b) will get
  // overridden automatically if we are generating responsive classes.
  $alias: null !default;
  $suffix: null !default;

  // If the `$alias` variable is already set, let’s generate a responsive suffix
  // out of it.
  @if ($alias != null) {

    $suffix: '\@' + $alias;

  }

  // Start looping through our different permutations.
  @each $direction in $_spacing-directions {

    @each $size, $value in $_spacing-sizes {

      // Create margin and paddings classes.
      .u-margin#{$direction}#{$size}#{$suffix} {
        margin#{$direction}: $value !important;
      }

      .u-padding#{$direction}#{$size}#{$suffix} {
        padding#{$direction}: $value !important;
      }

    }

  }

}





// Generate our regular, non-responsive classes.
@include _build-spacing();





// Generate our responsive classes by looping over the series of breakpoints
// held by Sass MQ.
@each $alias, $bp in $mq-breakpoints {

  @include mq($from: $alias) {

    @include _build-spacing();

  }

}
